{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1VQfWHp9BSfs2xDjdAiR650glHy2eD3LV","timestamp":1729049575004},{"file_id":"1XIX31V-rrcnQpJ1cO3TtavTWr1DRZTOl","timestamp":1728927207660}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## HW5 - Binary Trees"],"metadata":{"id":"U3tbzuRb4La-"}},{"cell_type":"markdown","source":["## **Before you start**\n","\n","1. Make a copy of this Colab by clicking on File > Save a Copy in Drive\n","2. Input your student id, first name, and last name"],"metadata":{"id":"Se4ojQ1kPZuQ"}},{"cell_type":"code","source":["#@title  { run: \"auto\", display-mode: \"form\" }\n","student_id = \"\" #@param {type:\"string\"}\n","first_name = \"\" #@param {type:\"string\"}\n","last_name = \"\" #@param {type:\"string\"}"],"metadata":{"id":"5lfYnnaePgQQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **Tracing Binary Trees**\n","### Please upload the tracings for each problem solution.\n","\n"],"metadata":{"id":"aA10Pb1pQzUO"}},{"cell_type":"markdown","source":["### [Problem 1]\n","The following function will count the number of nodes in a Binary Tree:\n","\n","\n","\n"],"metadata":{"id":"24BcPhU5NSG1"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"Vd1TCJbkHPmS"},"outputs":[],"source":["def num_nodes(root):\n","  if root is None:\n","    return 0\n","\n","  nl = num_nodes(root.left)\n","  nr = num_nodes(root.right)\n","\n","  return 1 + nl + nr"]},{"cell_type":"markdown","source":["\n","Trace the function given the following tree representation:\n","\n","          3\n","        /   \\\n","       1     5\n","              \\\n","               7\n","                \\\n","                 8\n","\n","`returns 5`"],"metadata":{"id":"CWtxmtF50Rha"}},{"cell_type":"markdown","source":["*Insert Trace Here*"],"metadata":{"id":"rmm6453A0d6k"}},{"cell_type":"markdown","source":["### [Problem 2]\n","\n","The following function will count number of even nodes in a Binary Tree:\n"],"metadata":{"id":"yBjLU2ArPB1d"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"L6_dzYA8QjRJ"},"outputs":[],"source":["def num_even_nodes(root):\n","  if root is None:\n","    return 0\n","\n","  nl = num_nodes(root.left)\n","  nr = num_nodes(root.right)\n","\n","  if root.item % 2 == 0:\n","    return 1 + nl + nr\n","\n","  return nl + nr"]},{"cell_type":"markdown","source":["Trace the function given the following tree representation:\n","\n","          50\n","        /    \\\n","      40      53\n","     /  \\    /   \\\n","    35  46  51   56\n","          \n","\n","`returns 4`"],"metadata":{"id":"oP2kMP4v0zFF"}},{"cell_type":"markdown","source":["*Insert Trace Here*"],"metadata":{"id":"ZeawzjTU08Jg"}},{"cell_type":"markdown","source":["### [Problem 3]\n","\n","The following function will count number of even nodes at depth d:\n","\n"],"metadata":{"id":"c9rY-Q-1R5BT"}},{"cell_type":"code","source":["def num_nodes_d(root, d):\n","  if root is None:\n","    return 0\n","\n","  if d == 0:\n","    return 1\n","\n","  nl = num_nodes_d(root.left, d - 1)\n","  nr = num_nodes_d(root.right, d - 1)\n","\n","  return nl + nr"],"metadata":{"id":"yxl546BdS2rV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Trace the function given the following tree representation:\n","```\n","              50             0\n","  ----------------------------     \n","            /    \\\n","           40    53          1\n","  ----------------------------     \n","        /     \\   \n","       35      46            2\n","  ----------------------------     \n","     /   \\    /   \\\n","   5     10  5    19         3\n","  ----------------------------     \n","                    \\\n","                     2       4\n","  ----------------------------     \n","   \n","```\n","d = 3\n","\n","`returns 4`"],"metadata":{"id":"JlGHkclT1HrI"}},{"cell_type":"markdown","source":["*Insert Trace Here*"],"metadata":{"id":"QUc_PXVi1LOg"}},{"cell_type":"markdown","source":["# **Recursion and Binary Trees**\n","\n","\n"],"metadata":{"id":"3y_2YtZPGVOJ"}},{"cell_type":"markdown","source":["### [Problem 4]\n","\n","Write a recursive function that receives the *root* of a **binary tree** and a *key* as input and counts the total number of nodes that are the *less than* (NOT EQUAL TO) the key in the tree."],"metadata":{"id":"HJ_OFcN_1ZhE"}},{"cell_type":"code","source":["# Feel free to write helper (recursive) methods\n","def count_less(root, key):\n","  # Your code goes here\n","\n","  return -1"],"metadata":{"id":"Ht_u-7obGbRF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### [Problem 5]\n","\n","Write a recursive function that receives the *root* of a **binary tree** and a *key* as input and counts the total number of times the *key* appears in the tree."],"metadata":{"id":"bjF4zIhn27cT"}},{"cell_type":"code","source":["# Feel free to write helper (recursive) methods\n","def count_key(root, key):\n","  # Your code goes here\n","\n","  return -1"],"metadata":{"id":"VPWI_6YQ2_6H"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"cbC9Jb9u4mGZ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **Binary Search Trees**"],"metadata":{"id":"VzRU2qKX3E2k"}},{"cell_type":"markdown","source":["### [Problem 6]\n","\n","Write a function that receives the *root* of a **binary search tree** and a *key* as input and returns the node with the maximum value that is *less than* (NOT EQUAL TO) the given *key*. If such a value does not exist, return None."],"metadata":{"id":"oRU6jTGB3sF7"}},{"cell_type":"code","source":["# Feel free to write helper methods\n","def find_max_less_than_key(root, key):\n","    # Your code goes here\n","    return None"],"metadata":{"id":"0eK8nsQp3x5-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Y29wmA7U7lUD"},"source":["## How to Submit\n","\n","1. File > Download .ipynb\n","2. Upload the file to Blackboard"]}]}