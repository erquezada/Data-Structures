{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOxx+MPceLsqpwMsAR5bc5l"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"SoJdL3XdWf9c"},"outputs":[],"source":["# Given a binary tree T, determine whether T is a min-heap.\n","\n","# Given the level-order traversal of a binary tree T, can you determine whether T is a min heap or not? Explain and implement your approach to show why/why not.\n","\n","# Implement heap sort. What is the time complexity of this sorting algorithm?"]},{"cell_type":"code","source":["import random\n","\n","#######################################################\n","class Node:\n","\n","  def __init__(self, value):\n","    self.value = value\n","    self.left = None\n","    self.right = None\n","\n","  def height(self):\n","    if self.left is None and self.right is None:\n","        return 0\n","    hL = -1\n","    hR = -1\n","    if self.left is not None:\n","        hL = self.left.height()\n","    if self.right is not None:\n","        hR = self.right.height()\n","    return 1+max(hL,hR)\n","\n","  def balanceFactor(self):\n","      hL = -1\n","      if self.left is not None:\n","          hL = self.left.height()\n","      hR = -1\n","      if self.right is not None:\n","          hR = self.right.height()\n","      return hL - hR\n","\n","#######################################################\n","class BinaryTree:\n","\n","  def __init__(self, root):\n","    self.root = root\n","\n","  def insert(self, value, currNode):\n","    new_node = Node(value)\n","    if self.root is None:\n","      self.root = new_node\n","    else:\n","      # Randomly puts nodes to left or right\n","      randInt = random.randint(0,1)\n","      if randInt:\n","        if currNode.left is None:\n","          currNode.left = Node(value)\n","        else:\n","          self.insert(value, currNode.left)\n","      else:\n","        if currNode.right is None:\n","          currNode.right = Node(value)\n","        else:\n","          self.insert(value, currNode.right)\n","\n","def preOrder(node,res):\n","    res.append(node.value)\n","    if node.left:\n","      preOrder(node.left,res)\n","    if node.right:\n","      preOrder(node.right,res)\n","    return res\n","\n","def postOrder(node,res):\n","    if node.left:\n","      postOrder(node.left,res)\n","    if node.right:\n","      postOrder(node.right,res)\n","    res.append(node.value)\n","    return res\n","\n","def inOrder(node,res):\n","    if node.left:\n","      inOrder(node.left,res)\n","    res.append(node.value)\n","    if node.right:\n","      inOrder(node.right,res)\n","    return res\n","\n","def preOrderWithStack(node,res):\n","    stack = [node]\n","    while stack:\n","      currNode = stack.pop()\n","      res.append(currNode.value)\n","      if currNode.right:\n","        stack.append(currNode.right)\n","      if currNode.left:\n","        stack.append(currNode.left)\n","    return res\n","\n","from collections import deque\n","def levelOrder(node):\n","  # Activity 1\n","  res = []\n","  queue = deque([node])\n","  while queue:\n","    currLen = len(queue)\n","    for i in range(currLen):\n","      currNode = queue.popleft()\n","      res.append(currNode.value)\n","      if currNode.left:\n","        queue.append(currNode.left)\n","      if currNode.right:\n","        queue.append(currNode.right)\n","  return res\n","\n","def search(node,key):\n","  if not node:\n","    return False\n","  if node.value == key:\n","    return True\n","  return search(node.left, key) or search(node.right,key)\n","\n","#############################################################################\n","\n","# Code if you would like to to try the Binary Tree Structure code\n","tree = BinaryTree(Node(4))\n","tree.insert(5,tree.root)\n","tree.insert(3,tree.root)\n","tree.insert(5,tree.root)\n","\n","print(\"Pre Order: \" , preOrder(tree.root,[]))\n","print(\"Pre Order with Stack: \",preOrderWithStack(tree.root,[]))\n","print(\"Post Order: \",postOrder(tree.root,[]))\n","print(\"In Order:\",inOrder(tree.root,[]))\n","print(\"Level Order Traversal: \",levelOrder(tree.root))\n","\n","print('Searching for 3 in tree: ',search(tree.root,3))\n","print('Searching for 9 in tree: ',search(tree.root,9))\n","\n","print(tree.root.height())\n","print(tree.root.balanceFactor())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EbcZuKc6ZpCm","executionInfo":{"status":"ok","timestamp":1711249248520,"user_tz":360,"elapsed":8,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}},"outputId":"7ac2b9bb-3bce-4068-ed82-6952e5b74d0d"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Pre Order:  [4, 5, 5, 3]\n","Pre Order with Stack:  [4, 5, 5, 3]\n","Post Order:  [5, 3, 5, 4]\n","In Order: [5, 4, 5, 3]\n","Level Order Traversal:  [4, 5, 5, 3]\n","Searching for 3 in tree:  True\n","Searching for 9 in tree:  False\n","2\n","-1\n"]}]},{"cell_type":"code","source":["from BTs import BinaryTree\n","from BTs import Node\n","from BTs import *\n","\n","#######################################################################\n","class BinarySearchTree(BinaryTree):\n","\n","  def __init__(self,root = None):\n","    self.root = root\n","\n","  def insert(self, value):\n","    # Kept this so I wouldnt have to pass self.root in the calls within main function every time\n","    self._insert(value,self.root)\n","\n","  def _insert(self, value, node):\n","    if not node:\n","      return Node(value)\n","    else:\n","      if value <= node.value:\n","        if node.left is None:\n","          node.left = Node(value)\n","        else:\n","          self._insert(value, node.left)\n","      else:\n","        if node.right is None:\n","          node.right = Node(value)\n","        else:\n","          self._insert(value, node.right)\n","\n","  def search(self, value, node):\n","    # Activity 3\n","    if not node:\n","      return False\n","    elif node.value == value:\n","      return True\n","    elif value < node.left:\n","      return self.search(value, node.left)\n","    else:\n","      return self.search(value, node.right)\n","\n","  def delete(self, value):\n","    self._delete(value,self.root)\n","\n","  def _delete(self, value, node):\n","    # Activity 4\n","    if not node:\n","      return False\n","    elif node.value == value:\n","      if not node.left and not node.right:\n","        node = None\n","        return True\n","      else:\n","        node = node.right\n","        return True\n","    elif value <= node.value:\n","      self._delete(value, node.left)\n","    else:\n","      self._delete(value, node.right)\n","\n","  def max_node(self, node):\n","    while node.right is not None:\n","      node = node.right\n","    return node\n","\n","#######################################################################\n","\n","tree = BinarySearchTree(Node(8))\n","tree.insert(3)\n","tree.insert(10)\n","tree.insert(1)\n","tree.insert(6)\n","tree.insert(14)\n","tree.insert(4)\n","tree.insert(7)\n","tree.insert(13)\n","\n","print(\"Pre Order: \" , preOrder(tree.root,[]))\n","print(\"Pre Order with Stack: \",preOrderWithStack(tree.root,[]))\n","print(\"Post Order: \",postOrder(tree.root,[]))\n","print(\"In Order:\",inOrder(tree.root,[]))\n","print(\"Level Order: \", levelOrder(tree.root))\n","\n","print(\"------------------------------------\")\n","tree.delete(13)\n","print(\"Deleted Node with value 5\")\n","print(\"Pre Order: \" , preOrder(tree.root,[]))\n","tree.delete(8)\n","print(\"Deleted Node with value 4 (root)\")\n","print(\"Pre Order: \" , preOrder(tree.root,[]))\n","print(\"Tree Root: \", tree.root.value)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":393},"id":"9abTIgu0ZrJP","executionInfo":{"status":"error","timestamp":1711249256704,"user_tz":360,"elapsed":196,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}},"outputId":"6cd114a2-5262-40e0-9ca4-6cd6df5edac8"},"execution_count":2,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"No module named 'BTs'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-b40639a03b63>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mBTs\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mBinaryTree\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mBTs\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mNode\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mBTs\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m#######################################################################\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'BTs'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]}]}