{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1chQ2S9NH0gXHQtNRwRLkEnGTTSxK8CDE","timestamp":1725385317929},{"file_id":"1mKTsIoraWlD1Oe13kOoHWZptx2wmQXfB","timestamp":1724864423421},{"file_id":"1I5BKbwy8lp9ORnbgIhT9cM60Zgvok2Rm","timestamp":1661298078378},{"file_id":"1r8_Tt51h_euXTpS3lXy_ShNS-MgXFI7u","timestamp":1659098064674},{"file_id":"1qE-CS4woFSL_leKpLwpkNGMlExRGhtSN","timestamp":1658858068965},{"file_id":"1wDY5EzQjg-ziTQN744hV4J-jCXmPpVt4","timestamp":1657526211369},{"file_id":"1EaRdkALO89csNZqr_HA37FMRPAjaitac","timestamp":1617810083357},{"file_id":"1YgQDInUaF1Xl6zE8MQRzWuYXCvRZKTnP","timestamp":1617218040960},{"file_id":"1-XigS50_eqWaov68fOPeDIFRfXffBZWF","timestamp":1617032997693},{"file_id":"1k8yMkoNHbrvZNrTOA6SucdbahLU6HV0M","timestamp":1616603195861}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"Xdiei2OBjaRO"},"source":["# [F24-DS] Lists & Tuples Assignment\n"]},{"cell_type":"markdown","metadata":{"id":"H98x_Ijajgbt"},"source":["## **Before you start**\n","\n","1. Make a copy of this Colab by clicking on File > Save a Copy in Drive\n","2. Input your student id, first name, and last name\n"]},{"cell_type":"code","metadata":{"id":"JiVkHvJ5jF4T"},"source":["#@title  { run: \"auto\", display-mode: \"form\" }\n","student_id = \"80532860\" #@param {type:\"string\"}\n","first_name = \"Eric\" #@param {type:\"string\"}\n","last_name = \"Quezada\" #@param {type:\"string\"}\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LQDs0ERclCZm"},"source":["\n","## Deliberate Practice\n","\n","Practicing is necessary to learn and develop skills (like learning how to ride a bike or juggle). Problem-solving skills are no different. In this process, it is normal and expected to make mistakes and feel a little challenged - these are good things!!!\n","\n","\n","To get the most out of this assignment (and get a good grade), you must deliberately try to solve each problem before looking at someone else's solution. When problem-solving, try to consciously observe your decision-making processes, the actions you engage in, your responses to confusion, the tools you use as support (i.e. paper and pencil), your strategies to remove uncertainty, the events that cause a change in your confidence (positive or negative), your reactions to the unexpected, situations where you identify help is needed, the steps you take to identify and articulate what you need help with, etc.\n"]},{"cell_type":"markdown","source":["##Section 1 Multiple Choice [20 Points]\n","\n","\n","\n","1.   Which of the following methods adds an element to the end of a list?\n","\n","\n","        A) insert()\n","        B) append()\n","        C) extend()\n","        D) add()\n","```python\n","  # Your answer here\n","  answer_1 = \"b\"\n","  ```\n","\n","---\n","\n","\n","\n","\n","\n","\n","\n","\n","\n"],"metadata":{"id":"9NNNO-YK82IB"}},{"cell_type":"markdown","source":["2.   Which of the following will remove the element 3 from the list my_list = [1, 2, 3, 4, 5]?\n","\n","\n","        A) my_list.delete(3)\n","        B) my_list.pop(3)\n","        C) my_list.remove(3)\n","        D) my_list.discard(3)\n","\n","```python\n","  # Your answer here\n","  answer_2 = \"c\"\n","  ```\n","\n","---\n","\n"],"metadata":{"id":"h7EUt3FaDcXY"}},{"cell_type":"markdown","source":["3.   What does the list.pop() method return if no index is specified?\n","\n","\n","        A) The first element in the list\n","        B) The last element in the list\n","        C) The middle element in the list\n","        D) None, it only removes the element\n","\n","\n","```python\n","  # Your answer here\n","  answer_3 = \"b\"\n","  ```\n","\n","---\n"],"metadata":{"id":"20uyTl2UEDiV"}},{"cell_type":"markdown","source":["4.   How can you reverse the elements of a list my_list in place?\n","\n","\n","        A) my_list.reverse()\n","        B) my_list[::-1]\n","        C) reversed(my_list)\n","        D) my_list.sort(reverse=True)\n","\n","\n","```python\n","  # Your answer here\n","  answer_4 = \"d\"\n","  ```\n","\n","---\n"],"metadata":{"id":"9LS2jt6cEHFq"}},{"cell_type":"markdown","source":["\n","5.   Given the list my_list = [1, 2, 3, 4], what will be the result of my_list * 2?\n","\n","\n","        A) [2, 4, 6, 8]\n","        B) [1, 2, 3, 4, 1, 2, 3, 4]\n","        C) [1, 2, 3, 4, 4, 3, 2, 1]\n","        D) [2, 3, 4, 5, 6, 7, 8]\n","\n","```python\n","  # Your answer here\n","  answer_5 = \"b\"\n","  ```\n","\n","---\n","\n","\n"],"metadata":{"id":"oyWQfFaQEI5T"}},{"cell_type":"markdown","source":["##Section 2 Short Answer [20 Points]"],"metadata":{"id":"I-NI2brQHJF6"}},{"cell_type":"markdown","source":["1.   What is the primary difference between a list and a tuple?\n","\n","```python\n","  # Your answer here\n","  answer_1 = \"A list is mutable, whereas a tuple is immutuable.\"\n","  ```\n","\n","---"],"metadata":{"id":"q1qK_Jy4HQfI"}},{"cell_type":"markdown","source":["2.   In what scenario would you use a list and what scenario would you use a tuple?\n","\n","```python\n","  # Your answer here\n","  answer_2 = \"I would use a list when I need to add, remove or change elements.\"\n","  \"I would use a tuple when working with fixed collections or elements that won't\"\n","  \"change after creation.\n","  \n","  ```\n","\n","---"],"metadata":{"id":"4fe-Ih3EISMm"}},{"cell_type":"markdown","source":["3.   How does Python handle negative indexing with lists?\n","\n","\n","```python\n","  # Your answer here\n","  answer_3 = \"Negative numbers mean that you count from the right instead of the left.\"\n","  \"So, list[-1] refers to the last element, list[-2] is the second-last, and so on...\"\n","  ```\n","\n","\n","\n","---"],"metadata":{"id":"wyej_3J0IWsM"}},{"cell_type":"markdown","source":["4. Explain the concept of mutability in Python. How does this apply to lists and tuples?\n","\n","```python\n","  # Your answer here\n","  answer_4 = \"Tuples are immutable and can store any type of object, whereas lists are\"\n","  \"mutable sequences that allow in-place modifications. Tuples are often used when a\"\n","  \"sequence of values should remain constant, whereas lists are more flexible,\"\n","  \"allowing for replacement, addition, and deletion. Although both tuples and lists\"\n","  \"support similar operations like indexing(), their mutability differences \"\n","  \"significantly affect how they can be used and manipulated in Python code.\"\n","  ```\n","\n","\n","\n","---"],"metadata":{"id":"OY3EaQJVIfc9"}},{"cell_type":"markdown","source":["## Section 3 Programming Practice [60 Points]\n"],"metadata":{"id":"oPKJ2P-_9RQG"}},{"cell_type":"markdown","source":["Spend at most 30 minutes on each of the problems below. If you feel stuck after working on a problem for 30 minutes, stop. Regardless of whether you stopped or wrote a solution, ask a classmate, TA, or professor to share their solution(s) with you (you may also search online).\n","\n","After solving each problem do the following:\n","1. On paper, create a step-by-step trace of your algorithm's execution for a sample input.\n","2. Take a clear, well-lit photograph of your handwritten trace.\n","3. Upload the image of your solution trace at the end of each problem by creating a text box and uploading the image"],"metadata":{"id":"7j9td3gc2Fpx"}},{"cell_type":"markdown","source":["###Problem 1\n","\n","Given a list of integers *nums* consisting of elements in the form $[x_1,x_2,...,x_n,y_1,y_2,...,y_n]$, return a list that contains the same values as *nums* but in the form $[x_1,y_1,x_2,y_2,...,x_n,y_n]$.\n","\n","\n","    Example: nums=[2,5,1,3,4,7], n=3 -> [2,3,5,4,1,7]"],"metadata":{"id":"QSRd31teK5VF"}},{"cell_type":"code","source":["def shuffle(nums):\n","  n = len(nums) // 2\n","  result = []\n","  for i in range(n):\n","    result.append(nums[i])\n","    result.append(nums[i+n])\n","  return result"],"metadata":{"id":"eBpvKvCiSbSZ","executionInfo":{"status":"ok","timestamp":1725553654666,"user_tz":360,"elapsed":252,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# Sample test case(s)\n","assert shuffle([1, 2, 3, 4, 5, 6]) == [1, 4, 2, 5, 3, 6], \"Test case 1 failed\"\n","\n","assert shuffle([1, 2]) == [1, 2], \"Test case 3 failed\"\n","\n","assert shuffle([]) == [], \"Test case 4 failed\"\n","\n","assert shuffle([-1, -2, -3, 1, 2, 3]) == [-1, 1, -2, 2, -3, 3], \"Test case 5 failed\"\n","\n","assert shuffle([1, 10, 100, 2, 20, 200]) == [1, 2, 10, 20, 100, 200], \"Test case 6 failed\"\n","\n","# Add more test cases here if you think the given one(s) are not sufficient to\n","# test for correctness and robustness.\n","\n","print(\"All test cases passed!\")"],"metadata":{"id":"wdcFafoBTZEI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1725553656602,"user_tz":360,"elapsed":259,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}},"outputId":"afaee33c-f7e7-4e8a-9f94-ae49250a02ca"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["All test cases passed!\n"]}]},{"cell_type":"markdown","source":["[Insert Trace]"],"metadata":{"id":"HkEV3wuE9HAt"}},{"cell_type":"markdown","metadata":{"id":"XCnqe-tIt1rk"},"source":["###Problem 2\n","\n","Given an integer list *nums* and an integer *k* (where *k* >= 1), count how many numbers in the list are divisible by *k*.\n","\n","    \n","    Example: nums=[1,2,3,4,5,6,7,8,9,10], k=2 -> 5\n"]},{"cell_type":"code","metadata":{"id":"yGV-EK-yvS5z","executionInfo":{"status":"ok","timestamp":1725553704833,"user_tz":360,"elapsed":137,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}}},"source":["def count_divisible(nums, k):\n","  count = 0\n","  for num in nums:\n","    if num % k == 0:\n","      count += 1\n","  return count"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"_Csy46ozvX0b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1725553707101,"user_tz":360,"elapsed":264,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}},"outputId":"30400914-6017-4350-b4eb-675a2fa0fb8d"},"source":["# Sample test case(s)\n","assert count_divisible([1,2,3,4,5,6,7,8,9,10], 2) == 5, \"Test case 1 failed\"\n","\n","assert count_divisible([2,4,6,8,10], 2) == 5, \"Test case 2 failed\"\n","\n","assert count_divisible([1,3,5,7,9], 2) == 0, \"Test case 3 failed\"\n","\n","assert count_divisible([], 5) == 0, \"Test case 4 failed\"\n","\n","assert count_divisible([1,2,3,4,5], 1) == 5, \"Test case 5 failed\"\n","\n","# Add more test cases here if you think the given one(s) are not sufficient to\n","# test for correctness and robustness.\n","\n","print(\"All test cases passed!\")"],"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["All test cases passed!\n"]}]},{"cell_type":"markdown","source":["[Insert Trace]"],"metadata":{"id":"UP06PFDT9Nez"}},{"cell_type":"markdown","metadata":{"id":"uZLSB_eOjjbb"},"source":["###Problem 3\n","\n","Given an integer list *nums* and a non-negative integer *k*, circularly shift the array to the left by *k* spaces. Elements at the beginning of the list are to be shifted to the end of the list.    \n","    \n","    Examples: nums=[1,2,3,4,5], k = 1 -> [2,3,4,5,1]\n","              nums=[1,2,3,4,5], k = 3 -> [4,5,1,2,3]\n","            \n"]},{"cell_type":"code","metadata":{"id":"63swuepLsHaA","executionInfo":{"status":"ok","timestamp":1725553777573,"user_tz":360,"elapsed":204,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}}},"source":["def circular_shift(nums, k):\n","  n = len(nums)\n","  k = k % n\n","  return nums[k:] + nums[:k]"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"mBxTWX8DsXUT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1725553778735,"user_tz":360,"elapsed":167,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}},"outputId":"a0bfa5f7-ae31-46a3-d34a-2a2c11189301"},"source":["# Sample test case(s)\n","assert circular_shift([1,2,3,4,5], 1) == [2,3,4,5,1], \"Test case 1 failed\"\n","\n","assert circular_shift([1,2,3,4,5], 3) == [4,5,1,2,3], \"Test case 2 failed\"\n","\n","assert circular_shift([1,2,3,4,5], 0) == [1,2,3,4,5], \"Test case 3 failed\"\n","\n","assert circular_shift([1,2,3,4,5], 5) == [1,2,3,4,5], \"Test case 4 failed\"\n","\n","assert circular_shift([1,2,3,4,5], 7) == [3,4,5,1,2], \"Test case 5 failed\"\n","\n","# Add more test cases here if you think the given one(s) are not sufficient to\n","# test for correctness and robustness.\n","\n","print(\"All test cases passed!\")\n"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["All test cases passed!\n"]}]},{"cell_type":"markdown","source":["[Insert Trace]"],"metadata":{"id":"4HAz79r99QNr"}},{"cell_type":"markdown","metadata":{"id":"mFWZR7grv3Kq"},"source":["###Problem 4\n","\n","Given two lists of integers, return a new list that contains the common elements between them in ascending order. Feel free to assume that neither list contains duplicates.\n","\n","    Examples: nums1=[1,2,3], nums2=[2,5,1] -> [1,2]\n","              nums1=[2,3,1], nums2=[5,0,7] -> []\n","\n","          "]},{"cell_type":"code","metadata":{"id":"Z_MCzwaWv1cT","executionInfo":{"status":"ok","timestamp":1725553821601,"user_tz":360,"elapsed":136,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}}},"source":["def list_intersection(nums1, nums2):\n","  result = []\n","  for num in nums1:\n","    if num in nums2 and num not in result:\n","      result.append(num)\n","  result.sort()\n","  return result"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"hyM-8kor5o08","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1725553823217,"user_tz":360,"elapsed":153,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}},"outputId":"ba9f018f-6f1c-448f-ad9a-ad0b17e8d576"},"source":["# Sample test case(s)\n","assert list_intersection([1,2,3], [2,5,1]) == [1,2], \"Test case 1 failed\"\n","\n","assert list_intersection([2,3,1], [5,0,7]) == [], \"Test case 2 failed\"\n","\n","assert list_intersection([1,2,3], [3,2,1]) == [1,2,3], \"Test case 3 failed\"\n","\n","assert list_intersection([], [1,2,3]) == [], \"Test case 4 failed\"\n","\n","assert list_intersection([], []) == [], \"Test case 5 failed\"\n","\n","\n","# Add more test cases here if you think the given one(s) are not sufficient to\n","# test for correctness and robustness.\n","\n","print(\"All test cases passed!\")"],"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["All test cases passed!\n"]}]},{"cell_type":"markdown","source":["[Insert Trace]"],"metadata":{"id":"lP_FkbqK9T-_"}},{"cell_type":"markdown","source":["### Problem 5\n","\n","You are given two sorted tuples of integers. Your task is to merge these two tuplesinto a single sorted tuple. The resulting tuple should be in non-decreasing order. Note that tuples are immutable in Python, so you'll need to work around this limitation.\n","\n","    Example: tuple1=(1,3,5,7) tuple2=(2,4,6,8) -> (1,2,3,4,5,6,7,8)"],"metadata":{"id":"IvE_XBkU6pBO"}},{"cell_type":"code","source":["def merge_tuples(tuple1, tuple2):\n","  result = []\n","  i, j = 0, 0\n","\n","  while i < len(tuple1) and j < len(tuple2):\n","    if tuple1[i] < tuple2[j]:\n","      result.append(tuple1[i])\n","      i += 1\n","    else:\n","      result.append(tuple2[j])\n","      j += 1\n","\n","  result.extend(tuple1[i:])\n","  result.extend(tuple2[j:])\n","\n","  return tuple(result)"],"metadata":{"id":"h1Ro1ucp7Kso","executionInfo":{"status":"ok","timestamp":1725553887853,"user_tz":360,"elapsed":225,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# Sample test case(s)\n","assert merge_tuples((1,3,5,7), (2,4,6,8)) == (1,2,3,4,5,6,7,8), \"Test case 1 failed\"\n","\n","assert merge_tuples((1,2,3), (4,5,6)) == (1,2,3,4,5,6), \"Test case 2 failed\"\n","\n","assert merge_tuples((1,3,5), (2,4,6)) == (1,2,3,4,5,6), \"Test case 3 failed\"\n","\n","assert merge_tuples((1,2,3), ()) == (1,2,3), \"Test case 4 failed\"\n","\n","assert merge_tuples((), ()) == (), \"Test case 5 failed\"\n","\n","# Add more test cases here if you think the given one(s) are not sufficient to\n","# test for correctness and robustness.\n","\n","print(\"All test cases passed!\")"],"metadata":{"id":"m9f1y7XF7O9x","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1725553890818,"user_tz":360,"elapsed":189,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}},"outputId":"e2046d0e-7df8-473e-85a1-bf44a2735a0a"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["All test cases passed!\n"]}]},{"cell_type":"markdown","source":["[Insert Trace]"],"metadata":{"id":"CR8t42JH9rYT"}},{"cell_type":"markdown","source":["## Grading Rubric\n","\n","[Link](https://docs.google.com/document/d/1zH7gK6gtJuWo8iZ0xSv08u9KW-S_fOBNGxJpKzPJAOE/edit?usp=sharing)"],"metadata":{"id":"tqsjw5w3wMB1"}},{"cell_type":"markdown","metadata":{"id":"Y29wmA7U7lUD"},"source":["## How to Submit\n","\n","1. File > Download .ipynb\n","2. Go to Blackboard, find the submission page, and upload the .ipynb file you just downloaded."]}]}