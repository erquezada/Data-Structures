{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"10ym2zj51llUOzLgJprbcbSPX0y_wfVxO","timestamp":1733685256320},{"file_id":"1WqnvpKXZq6beZzMX2TNbW44CuTa6JrWW","timestamp":1729614976289}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# [FA24-DS] B-Trees - Homework\n","\n","\n"],"metadata":{"id":"qcN_8LrQwXAX"}},{"cell_type":"markdown","source":["## **Before you start**\n","\n","1. Make a copy of this Colab by clicking on File > Save a Copy in Drive\n","2. Input your first name, last name, and and e-mail address"],"metadata":{"id":"nUFPhv7mwhwP"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"8uxX_DkzwRXO"},"outputs":[],"source":["#@title  { run: \"auto\", display-mode: \"form\" }\n","first_name = \"\" #@param {type:\"string\"}\n","last_name = \"\" #@param {type:\"string\"}\n","email_address = \"\" #@param {type:\"string\"}"]},{"cell_type":"markdown","source":["# **Tracing B-Trees**\n","### Please upload the tracing for the following problem."],"metadata":{"id":"a8kOSGZCF4Pg"}},{"cell_type":"markdown","source":["Follow the order of the given values for the keys in the B-Tree. Insert your trace (show how the B-Tree changes for every insertion).\n","\n","```\n","keys = [50, 700, -5, 1000, 800, 65, 45, 500, 90, 40, 2000, 600, 60, 80, 200]\n","max_num_keys = 3\n"],"metadata":{"id":"52BD-BcQG2hi"}},{"cell_type":"markdown","source":["*Insert Trace Here*"],"metadata":{"id":"fXdzW544G3x8"}},{"cell_type":"markdown","source":["## Instructions\n","\n","You will implement 4 different functions for the BTree class found at the bottom of the notebook. Implement each function in its corresponding section found in the code below, then complete the following 2 tasks:\n","\n","1.  Trace the code using a non-trivial instance of the problem (include a picture / screenshot - needs to done *by hand*)    \n","2. State the time complexity of the solution. Explain your reasoning.\n","\n","You are free to test your implementation in the code block below the tree class\n","\n"],"metadata":{"id":"9_Y9GwzoxIAO"}},{"cell_type":"markdown","source":["### Problem 1\n","Complete the implementation of the _height method. This method computes the height of a B-tree (The parameter node represents the root of the [sub]tree).  The height of an empty tree is -1. The height of a tree with only one node is 0."],"metadata":{"id":"jaSSPZETxSSt"}},{"cell_type":"markdown","source":["Complete tasks 1 and 2:\n","\n","1. *Insert Trace Here:*\n","2."],"metadata":{"id":"ptkMyHFUnsH8"}},{"cell_type":"markdown","source":["###Problem 2\n","Complete the implementation of the _num_nodes_at_depth method. This method returns the number of nodes at depth d of a B-tree (The parameter node represents the root of the [sub]tree)."],"metadata":{"id":"wMtBQ_KayMtL"}},{"cell_type":"markdown","source":["Complete tasks 1 and 2:\n","\n","1. *Insert Trace Here:*\n","2."],"metadata":{"id":"xCtSJhK2oCl8"}},{"cell_type":"markdown","source":["### Problem 3\n","Complete the implementation of the _max_val_at_depth method. This method returns the largest value in a B-tree at depth d. (The parameter node represents the root of the [sub]tree). If there are no nodes at depth d, return -float(\"inf\")."],"metadata":{"id":"xY-F5w9vyN2A"}},{"cell_type":"markdown","source":["Complete tasks 1 and 2:\n","\n","1. *Insert Trace Here:*\n","2."],"metadata":{"id":"swbyQEkYoHgg"}},{"cell_type":"markdown","source":["###Problem 4\n","Complete the implementation of the _search method. This method returns the node where k is, or None if k is not in the tree. (The parameter node represents the root of the [sub]tree)."],"metadata":{"id":"XENX1OgFyRU6"}},{"cell_type":"markdown","source":["Complete tasks 1 and 2:\n","\n","1. *Insert Trace Here:*\n","2."],"metadata":{"id":"yL8RGEO3oMV9"}},{"cell_type":"code","source":["#******************************************************************************\n","#DO NOT MODIFY THE CODE BELOW\n","#******************************************************************************\n","import matplotlib.pyplot as plt\n","class BTreeNode:\n","    # Constructor\n","    def __init__(self, keys=None, children=None, is_leaf=True, max_num_keys=5):\n","        if keys is None:\n","            keys = []\n","        if children is None:\n","            children = []\n","        self.keys = keys\n","        self.children = children\n","        self.is_leaf = is_leaf\n","        if max_num_keys < 3:  # max_num_keys must be odd and >= 3\n","            max_num_keys = 3\n","        if max_num_keys % 2 == 0:  # max_num_keys must be odd\n","            max_num_keys += 1\n","        self.max_num_keys = max_num_keys\n","\n","    def is_full(self):\n","        return len(self.keys) >= self.max_num_keys\n","\n","    def promote(self):\n","        middle_index = len(self.keys) // 2\n","        middle_key = self.keys[middle_index]\n","\n","        left_child = BTreeNode(\n","            self.keys[:middle_index],\n","            self.children[:middle_index+1],\n","            self.is_leaf, self.max_num_keys\n","            )\n","        right_child = BTreeNode(\n","            self.keys[middle_index+1:],\n","            self.children[middle_index+1:],\n","            self.is_leaf,\n","            self.max_num_keys\n","            )\n","\n","        return middle_key, left_child, right_child\n","\n","class BTree:\n","\n","    # Constructor\n","    def __init__(self, max_num_keys=5):\n","        self.max_num_keys = max_num_keys\n","        self.root = BTreeNode(max_num_keys=max_num_keys)\n","\n","    def insert(self, key):\n","        root = self.root\n","        if root.is_full():\n","            middle_key, left_child, right_child = root.promote()\n","            promoted_root = BTreeNode([middle_key], [left_child, right_child], False, self.max_num_keys)\n","            self.root = promoted_root\n","            self._insert_unfilled(promoted_root, key)\n","        else:\n","            self._insert_unfilled(root, key)\n","\n","    def _insert_unfilled(self, node, key):\n","        if node.is_leaf:\n","            node.keys.append(key)\n","            node.keys.sort()\n","        else:\n","            index = 0\n","            while index < len(node.keys) and key > node.keys[index]:\n","                index += 1\n","\n","            if node.children[index].is_full():\n","                middle_key, left_child, right_child = node.children[index].promote()\n","                node.keys.insert(index, middle_key)\n","                node.children[index] = left_child\n","                node.children.insert(index + 1, right_child)\n","\n","                if key > middle_key:\n","                    index += 1\n","\n","            self._insert_unfilled(node.children[index], key)\n","\n","              # Code to draw trees\n","    def leaves(self):\n","        return self._leaves(self.root)\n","\n","    def _leaves(self, node):\n","        if node.is_leaf:\n","            return [node.keys]\n","        s = []\n","        for c in node.children:\n","            s = s + self._leaves(c)\n","        return s\n","\n","    def _set_x(self, dx, node=None):\n","        if node is None:\n","            node = self.root\n","        if node.is_leaf:\n","            return\n","        else:\n","            for c in node.children:\n","                self._set_x(dx, c)\n","            d = (dx[node.children[0].keys[0]] + dx[node.children[-1].keys[0]] + 10 * len(node.children[-1].keys)) / 2\n","            dx[node.keys[0]] = d - 10 * len(node.keys) / 2\n","\n","    def _draw_btree(self, dx, y, y_inc, fs, ax, node):\n","        xs = dx[node.keys[0]]\n","        if node.is_leaf:\n","            for itm in node.keys:\n","                ax.plot([xs, xs + 10, xs + 10, xs, xs], [y, y, y - 10, y - 10, y], linewidth=1, color='k')\n","                ax.text(xs + 5, y - 5, str(itm), ha=\"center\", va=\"center\", fontsize=fs)\n","                xs += 10\n","        else:\n","            for i in range(len(node.keys)):\n","                xc = dx[node.children[i].keys[0]] + 5 * len(node.children[i].keys)\n","                ax.plot([xs, xs + 10, xs + 10, xs, xs], [y, y, y - 10, y - 10, y], linewidth=1, color='k')\n","                ax.text(xs + 5, y - 5, str(node.keys[i]), ha=\"center\", va=\"center\", fontsize=fs)\n","                ax.plot([xs, xc], [y - 10, y - y_inc], linewidth=1, color='k')\n","                self._draw_btree(dx, y - y_inc, y_inc, fs, ax, node.children[i])\n","                xs += 10\n","            xc = dx[node.children[-1].keys[0]] + 5 * len(node.children[-1].keys)\n","            ax.plot([xs, xc], [y - 10, y - y_inc], linewidth=1, color='k')\n","            self._draw_btree(dx, y - y_inc, y_inc, fs, ax, node.children[-1])\n","\n","    def draw(self):\n","        if self.root is None:\n","          print(\"<Empty Tree>\")\n","          return\n","        ll = self.leaves()\n","        dx = {}\n","        d = 0\n","        for l in ll:\n","            dx[l[0]] = d\n","            d += 10 * (len(l) + 1)\n","        self._set_x(dx)\n","        fig, ax = plt.subplots()\n","        self._draw_btree(dx, 0, 30, 10, ax, self.root)\n","        ax.set_aspect(1.0)\n","        ax.axis('off')\n","        plt.show()\n","#******************************************************************************\n","#DO NOT MODIFY THE CODE ABOVE\n","#******************************************************************************\n","\n","    def height(self):\n","        return self._height(self.root)\n","\n","    # --------------------------------------------------------------------------------------------------------------\n","    # Problem 1\n","    # --------------------------------------------------------------------------------------------------------------\n","    def _height(self, node):\n","        if node is None:\n","          return -1\n","\n","        if node.is_leaf:\n","          return 0\n","\n","        for child in node.children:\n","          return 1 + max(self._height(child) for child in node.children)\n","\n","    def num_nodes_at_depth(self, d):\n","        return self._num_nodes_at_depth(d, self.root)\n","\n","    # --------------------------------------------------------------------------------------------------------------\n","    # Problem 2\n","    # --------------------------------------------------------------------------------------------------------------\n","    def _num_nodes_at_depth(self, d, node):\n","        if node is None:\n","          return 0\n","        if d == 0:\n","          return 1\n","        count = 0\n","        for child in node.children:\n","          count += self._num_nodes_at_depth(d - 1, child)\n","        return count\n","\n","\n","    def max_val_at_depth(self, d):\n","        return self._max_val_at_depth(d, self.root)\n","\n","    # --------------------------------------------------------------------------------------------------------------\n","    # Problem 3\n","    # --------------------------------------------------------------------------------------------------------------\n","    def _max_val_at_depth(self, d, node):\n","        if d >= self.height() or node is None:\n","          return -float(\"inf\")\n","\n","      # Base Case 2: At the current target depth\n","        if d == 0:\n","          if node.keys: # If there values within the node\n","            return max(node.keys)\n","          else: #\n","            return -float(\"inf\") # Else no values were found\n","\n","        max_value_depth = -float(\"inf\") # Smallest value\n","\n","        for child in node.children:\n","          max_value_depth = max(max_value_depth, self._max_val_at_depth(d -1, child)) # Recursively find the max value at deth\n","\n","        return max_value_depth\n","\n","\n","    def search(self, k):\n","        return self._search(k, self.root)\n","\n","    # --------------------------------------------------------------------------------------------------------------\n","    # Problem 4\n","    # --------------------------------------------------------------------------------------------------------------\n","    def _search(self, k, node):\n","        if node is None:\n","            return False  # Key not found\n","\n","        # Check if the key is in the current node's keys\n","        if k in node.keys:\n","            return True  # Key is found\n","\n","        # Base case: If it's a leaf node and the key isn't found, return False\n","        if node.is_leaf:\n","            return False  # Key is not in the leaf node\n","\n","        # Recursive case: Find the appropriate child to traverse\n","        child_index = self._find_child(node, k)\n","\n","        # Check that node.children[child_index] is a valid node\n","        if child_index < len(node.children):\n","            return self._search(k, node.children[child_index])\n","        else:\n","            return False  # Invalid child, return False\n","\n","    # Helper function to find the correct child node to traverse based on key\n","    def _find_child(self, node, k):\n","        # Iterate through the keys to find where the key fits\n","        for i in range(len(node.keys)):\n","            if node.keys[i] > k:\n","                return i  # Return the index of the child to the left of the first key larger than k\n","\n","        # If no such key is found, return the last child (rightmost)\n","        return len(node.children) - 1\n","\n","\n"],"metadata":{"id":"ek0Y_GwnRBXZ","executionInfo":{"status":"ok","timestamp":1733701002292,"user_tz":420,"elapsed":130,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# Create an instance of the BTree with a max number of keys set to 5\n","btree = BTree(max_num_keys=5)\n","\n","# Insert values into the BTree\n","values = [15, 8, 22, 5, 12, 18, 30, 3, 7, 10, 14, 25, 40]\n","for value in values:\n","    btree.insert(value)\n","\n","# Draw the BTree structure\n","btree.draw()\n","\n","#Test your code here\n","#Feel free to make different trees\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":189},"id":"8YP5K2GyaGOO","executionInfo":{"status":"ok","timestamp":1729790085009,"user_tz":360,"elapsed":471,"user":{"displayName":"Brandon Cartwright","userId":"16958549321303885384"}},"outputId":"4746c893-d0ba-4b2e-c77c-53814e4d8aee"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"Y29wmA7U7lUD"},"source":["## How to Submit\n","\n","1. File > Download .ipynb\n","2. Go to Google Classroom, find the submission page, and upload the .ipynb file you just downloaded."]}]}