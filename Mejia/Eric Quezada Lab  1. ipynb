{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1dLPe8V4Cqv9eazqmxIW7zchf9J6WI3pw","timestamp":1727393430432},{"file_id":"15m5w-7y_ZuM91rq4meDrP9UrzVp28Okj","timestamp":1725900223723},{"file_id":"1No8COtVR33DnXgDgMEf2im5M7tJcuuWd","timestamp":1663450917064},{"file_id":"10uzey8Y7JKJ5i8gPaT3lENrHG-GCYoom","timestamp":1663357482757},{"file_id":"1duo_WC9HyWLA9mRdVOjvsd39Vh2t2wJB","timestamp":1662153975800},{"file_id":"1XTTtOcY6Rcy87OmTlvYU1Ch3zWQuceYR","timestamp":1662140956488},{"file_id":"1OxCmZw3BQKXLuxD6DpjVqXDTZljzLKid","timestamp":1654884623241},{"file_id":"1Pb3r3nCzwIEHO2LPoX6aDsm1DafkuHBj","timestamp":1654636574132}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **CS2302 Data Structures**\n","**Assignment:** Lab 1 - Lists, Sets, Dictionaries, and Tuples\n"],"metadata":{"id":"mGj1VMNwqLq3"}},{"cell_type":"markdown","source":["## Student Information\n","Before proceeding any further, make sure to create a copy of this notebook and change the information below to match yours.\n","\n","**Make your own copy of the notebook before working on it!**\n","> (File > Save a Copy in Drive)\n"],"metadata":{"id":"eOnECHgtrtyQ"}},{"cell_type":"markdown","source":[],"metadata":{"id":"AVOvT1lZDKUG"}},{"cell_type":"code","source":["#@title  { run: \"auto\", display-mode: \"form\" }\n","student_id = \"\" #@param {type:\"string\"}\n","first_name = \"\" #@param {type:\"string\"}\n","last_name = \"\" #@param {type:\"string\"}"],"metadata":{"id":"mrAYt5yFQDvq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Academic Integrity Statement\n","This work is to be done individually. It is not permitted to share, reproduce, or alter any part of this assignment for any purpose. Students are not permitted from sharing code, uploading this assignment online in any form, viewing, receiving, or modifying code written from anyone else. This assignment is part of an academic course at The University of Texas at El Paso and a grade will be assigned for the work produced individually by the student.\n","\n","## Copyright Notice\n","This work is protected by U.S. Copyright law. Any redistribution of this work is strictly prohibited."],"metadata":{"id":"GH8OlYHDVNVP"}},{"cell_type":"markdown","source":["## Guidelines\n","**PLEASE READ THIS CAREFULLY!**\n","\n","This Colab notebook contains all the starter code needed for the lab along with some explanations and hints.\n","\n","**DO NOT CHANGE ANY OF THE FUNCTION NAMES OR PARAMETERS**\n","\n","As the code will be auto-graded by another program, changing any of the function names or parameters will result in you getting 0 points for that problem. Therefore do not change any function names or parameters. Feel free to add more functions, test cases, and any other code as long as you do not modify the pre-existing function names.\n"],"metadata":{"id":"0ixvvJlHOfgb"}},{"cell_type":"markdown","source":["## Introduction\n","Welcome to the Library Management System lab! In this project, you will develop a comprehensive, console-based application that simulates the operations of a library. This lab is designed to give you hands-on experience with various Python data structures including dictionaries, sets, lists, and tuples.\n","\n","The Library Management System will allow you to manage books, customers, and borrowing operations. You'll implement functionalities such as adding new books, registering customers, handling book loans and returns, and generating reports. This project will help you understand how to choose and use appropriate data structures for different scenarios, and how these structures can work together in a larger application.\n","\n","As you work through this lab, pay attention to how each data structure is used:\n","- Dictionaries for fast lookups and associations\n","- Sets for managing unique collections and efficient membership testing\n","- Lists for ordered data and queue-like operations\n","- Tuples for immutable grouped data"],"metadata":{"id":"qpBrPckozyHE"}},{"cell_type":"markdown","source":["##Implementing the Classes\n","\n","### Author Class\n","1. Complete the `add_book` method:\n","   - Add the given book to the author's `books` set.\n","   - Ensure you don't add duplicate books.\n","\n","### Book Class\n","1. Implement the `__str__` method:\n","   - Return a string representation of the book, including title, author name, and year.\n","   - Example: \"The Great Gatsby by F. Scott Fitzgerald (1925)\"\n","\n","### Customer Class\n","1. Implement the `borrow_book` method:\n","   - Add the given book to the customer's `borrowed_books` list.\n","   - Ensure the same book isn't borrowed twice.\n","2. Implement the `return_book` method:\n","   - Remove the given book from the customer's `borrowed_books` list.\n","   - Handle the case where the book wasn't borrowed by this customer.\n","3. Implement the `get_borrowed_books` method:\n","   - Return the list of books currently borrowed by the customer.\n","\n","### LibraryManagementSystem Class\n","1. Implement the `add_book` method:\n","   - Create a new Book object and add it to the `books` dictionary.\n","   - If the author doesn't exist, create a new Author object and add it to the `authors` dictionary.\n","   - Add the book to the author's collection.\n","   - Update the `genre_classification` dictionary.\n","2. Implement the `register_customer` method:\n","   - Create a new Customer object with a unique ID.\n","   - Add the customer to the `customers` dictionary.\n","   - Return the new customer ID.\n","3. Implement the `borrow_book` method:\n","   - Check if the book is available and the customer exists.\n","   - Update the book's available copies.\n","   - Call the customer's `borrow_book` method.\n","   - Handle cases where the book or customer doesn't exist, or the book is unavailable.\n","4. Implement the `return_book` method:\n","   - Check if the customer has borrowed the book.\n","   - Update the book's available copies.\n","   - Call the customer's `return_book` method.\n","   - Handle cases where the book or customer doesn't exist, or the customer hasn't borrowed the book.\n","5. Implement the `search_books` method:\n","   - Allow searching by title, author name, or ISBN.\n","   - Return a list of matching Book objects.\n","6. Implement the `display_available_books` method:\n","   - Return a list of all books with available copies.\n","7. Implement the `display_customer_books` method:\n","   - Return a list of books currently borrowed by the given customer.\n","8. Implement the `recommend_books` method:\n","   - Recommend books based on the genres of books the customer has borrowed.\n","   - Return a list of up to 5 recommended books.\n","9. Implement the `add_to_waitlist` method:\n","    - Add a customer to a book's waitlist if the book is currently unavailable.\n","10. Implement the `check_late_returns` method:\n","    - Check all borrowed books and return a list of late returns.\n","    - Assume a book is late if it has been borrowed for more than the given number of days.\n","11. Implement the `run` method:\n","    - Create a console interface for interacting with the library system.\n","    - Display the following menu options and handle user input to call appropriate methods.\n","    1. Add Book\n","    2. Register Customer\n","    3. Borrow Book\n","    4. Return Book\n","    5. Search Books\n","    6. Display Available Books\n","    7. Display Customer's Borrowed Books\n","    8. Recommend Books\n","    9. Check Late Returns\n","    0. Exit\n","    \n","\n"],"metadata":{"id":"hGUy2igclQNo"}},{"cell_type":"code","source":["import csv\n","\n","class Author:\n","    def __init__(self, name):\n","        self.name = name\n","        self.books = set()\n","\n","    def add_book(self, book):\n","        # Adds book to the author's collection, ensuring no duplicates\n","        if book not in self.books:\n","            self.books.add(book)\n","\n","    def __str__(self):\n","        return self.name"],"metadata":{"id":"WBesYtiZWCP7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Book:\n","    def __init__(self, title, author, year, isbn, genre, available_copies):\n","        self.title = title\n","        self.author = author\n","        self.year = year\n","        self.isbn = isbn\n","        self.genre = genre\n","        self.available_copies = available_copies\n","        self.total_copies = available_copies\n","\n","    def __str__(self):\n","        return f\"{self.title} by {self.author} ({self.year})\"\n","\n","    def is_available(self):\n","        return self.available_copies > 0\n","\n","    def borrow(self):\n","        if self.is_available():\n","            self.available_copies -= 1\n","        else:\n","            raise Exception(\"No copies available\")\n","\n","    def return_book(self):\n","        if self.available_copies < self.total_copies:\n","            self.available_copies += 1\n"],"metadata":{"id":"s6qNVXplWJYq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Customer:\n","    def __init__(self, customer_id, name):\n","        self.customer_id = customer_id\n","        self.name = name\n","        self.borrowed_books = []\n","\n","    def borrow_book(self, book):\n","        if book in self.borrowed_books:\n","            raise Exception(f\"Book '{book}' is already borrowed.\")\n","        self.borrowed_books.append(book)\n","\n","    def return_book(self, book):\n","        if book not in self.borrowed_books:\n","            raise Exception(f\"Book '{book}' wasn't borrowed by {self.name}.\")\n","        self.borrowed_books.remove(book)\n","\n","    def get_borrowed_books(self):\n","        return self.borrowed_books\n","\n","    def __str__(self):\n","        return self.name\n"],"metadata":{"id":"pVDaAnPTWSmv","executionInfo":{"status":"ok","timestamp":1727824216313,"user_tz":360,"elapsed":195,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["class LibraryManagementSystem:\n","    def __init__(self):\n","        self.books = {}  # Dictionary to hold books with ISBN as the key\n","        self.authors = {}  # Dictionary to hold authors with author name as the key\n","        self.customers = {}  # Dictionary to hold customers with customer_id as the key\n","        self.genre_classification = {}  # Dictionary to hold genres and associated books\n","        self.customer_id_counter = 1\n","\n","    def load_books_from_csv(self, filename):\n","        try:\n","            with open(filename, newline='', encoding='utf-8') as csvfile:\n","                reader = csv.DictReader(csvfile)\n","\n","                for row in reader:\n","                    title = row['Title']\n","                    author_name = row['Author Name']\n","                    year = row['Author Birth Year']\n","                    isbn = row['ISBN']\n","                    genre = row['Genre']\n","                    copies = int(row['Copies'])\n","\n","                    # Check if author exists, if not, create a new author\n","                    if author_name not in self.authors:\n","                        new_author = Author(author_name)\n","                        self.authors[author_name] = new_author\n","                    else:\n","                        new_author = self.authors[author_name]\n","\n","                    # Create a new book\n","                    new_book = Book(title=title, author=new_author, year=year, isbn=isbn, genre=genre, available_copies=copies)\n","\n","                    # Add the book to the author's collection\n","                    new_author.add_book(new_book)\n","\n","                    # Add the book to the library system\n","                    self.books[isbn] = new_book\n","\n","                    # Update genre classification\n","                    if genre not in self.genre_classification:\n","                        self.genre_classification[genre] = []\n","                    self.genre_classification[genre].append(new_book)\n","\n","            print(\"Books loaded successfully from CSV.\")\n","\n","            # Add this to print out the books loaded\n","            print(\"\\nBooks in the Library:\")\n","            for book in self.books.values():\n","                print(book)\n","\n","        except FileNotFoundError:\n","            print(f\"File '{filename}' not found.\")\n","        except KeyError as e:\n","            print(f\"Missing column in CSV: {e}\")\n","        except Exception as e:\n","            print(f\"Error loading books: {e}\")\n","\n","    def add_book(self, title, author_name, year, isbn, genre, copies):\n","        if isbn in self.books:\n","            raise Exception(\"Book already exists in the system.\")\n","\n","        if author_name not in self.authors:\n","            new_author = Author(author_name)\n","            self.authors[author_name] = new_author\n","        else:\n","            new_author = self.authors[author_name]\n","\n","        new_book = Book(title, new_author, year, isbn, genre, available_copies=copies)\n","        self.books[isbn] = new_book\n","        new_author.add_book(new_book)\n","\n","        if genre not in self.genre_classification:\n","            self.genre_classification[genre] = []\n","        self.genre_classification[genre].append(new_book)\n","\n","    def register_customer(self, name):\n","        new_customer = Customer(self.customer_id_counter, name)\n","        self.customers[self.customer_id_counter] = new_customer\n","        self.customer_id_counter += 1\n","        return new_customer.customer_id\n","\n","    def borrow_book(self, customer_id, isbn):\n","        if isbn not in self.books:\n","            raise Exception(\"Book does not exist.\")\n","        if customer_id not in self.customers:\n","            raise Exception(\"Customer does not exist.\")\n","\n","        book = self.books[isbn]\n","        customer = self.customers[customer_id]\n","\n","        if not book.is_available():\n","            raise Exception(\"Book is not available.\")\n","\n","        book.borrow()\n","        customer.borrow_book(book)\n","\n","    def return_book(self, customer_id, isbn):\n","        if isbn not in self.books:\n","            raise Exception(\"Book does not exist.\")\n","        if customer_id not in self.customers:\n","            raise Exception(\"Customer does not exist.\")\n","\n","        book = self.books[isbn]\n","        customer = self.customers[customer_id]\n","\n","        if book not in customer.get_borrowed_books():\n","            raise Exception(f\"Customer has not borrowed this book.\")\n","\n","        book.return_book()\n","        customer.return_book(book)\n","\n","    def search_books(self, title=None, author_name=None, isbn=None):\n","        results = []\n","        for book in self.books.values():\n","            if title and title.lower() in book.title.lower():\n","                results.append(book)\n","            elif author_name and author_name.lower() in book.author.name.lower():\n","                results.append(book)\n","            elif isbn and isbn == book.isbn:\n","                results.append(book)\n","        return results\n","\n","    def display_available_books(self):\n","        available_books = [book for book in self.books.values() if book.is_available()]\n","        return available_books\n","\n","    def display_customer_books(self, customer_id):\n","        if customer_id not in self.customers:\n","            raise Exception(\"Customer does not exist.\")\n","        customer = self.customers[customer_id]\n","        return customer.get_borrowed_books()\n","\n","    def recommend_books(self, customer_id):\n","        if customer_id not in self.customers:\n","            raise Exception(\"Customer does not exist.\")\n","        customer = self.customers[customer_id]\n","\n","        borrowed_books = customer.get_borrowed_books()\n","        borrowed_genres = set(book.genre for book in borrowed_books)\n","\n","        recommendations = []\n","        for genre in borrowed_genres:\n","            for book in self.genre_classification.get(genre, []):\n","                if book not in borrowed_books and len(recommendations) < 5:\n","                    recommendations.append(book)\n","\n","        return recommendations\n","\n","# Example interactive functionality\n","\n","lms = LibraryManagementSystem()\n","lms.load_books_from_csv('/content/books.csv')\n","\n","# Function to display available books\n","def display_available_books(lms):\n","    available_books = lms.display_available_books()\n","    print(\"\\nAvailable Books:\")\n","    for book in available_books:\n","        print(book)\n","\n","# Function to borrow a book\n","def borrow_book_interactive(lms):\n","    customer_id = int(input(\"\\nEnter your customer ID: \"))\n","    isbn = input(\"Enter the ISBN of the book to borrow: \")\n","\n","    try:\n","        lms.borrow_book(customer_id, isbn)\n","        print(f\"Book with ISBN {isbn} borrowed successfully.\")\n","    except Exception as e:\n","        print(f\"Error: {e}\")\n","\n","# Function to return a book\n","def return_book_interactive(lms):\n","    customer_id = int(input(\"\\nEnter your customer ID: \"))\n","    isbn = input(\"Enter the ISBN of the book to return: \")\n","\n","    try:\n","        lms.return_book(customer_id, isbn)\n","        print(f\"Book with ISBN {isbn} returned successfully.\")\n","    except Exception as e:\n","        print(f\"Error: {e}\")\n","\n","# Function to register a new customer\n","def register_customer_interactive(lms):\n","    name = input(\"Enter your name to register: \")\n","\n","    try:\n","        customer_id = lms.register_customer(name)\n","        print(f\"Customer registered successfully. Your customer ID is {customer_id}\")\n","    except Exception as e:\n","        print(f\"Error: {e}\")\n","\n","# Main menu\n","while True:\n","    print(\"\\nLibrary Management System\")\n","    print(\"1. Register as a customer\")\n","    print(\"2. Display available books\")\n","    print(\"3. Borrow a book\")\n","    print(\"4. Return a book\")\n","    print(\"5. Exit\")\n","\n","    choice = input(\"\\nEnter your choice (1-5): \")\n","\n","    if choice == '1':\n","        register_customer_interactive(lms)\n","    elif choice == '2':\n","        display_available_books(lms)\n","    elif choice == '3':\n","        borrow_book_interactive(lms)\n","    elif choice == '4':\n","        return_book_interactive(lms)\n","    elif choice == '5':\n","        print(\"Goodbye!\")\n","        break\n","    else:\n","        print(\"Invalid choice. Please try again.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"nW1OdeErtCc6","outputId":"05c3e28e-f633-407e-ad1d-9db271619d91","executionInfo":{"status":"error","timestamp":1727824465838,"user_tz":360,"elapsed":151656,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}}},"execution_count":4,"outputs":[{"name":"stdout","output_type":"stream","text":["Books loaded successfully from CSV.\n","\n","Books in the Library:\n","The Great Gatsby by F. Scott Fitzgerald (1896)\n","To Kill a Mockingbird by Harper Lee (1926)\n","1984 by George Orwell (1903)\n","Pride and Prejudice by Jane Austen (1775)\n","The Catcher in the Rye by J.D. Salinger (1919)\n","The Hobbit by J.R.R. Tolkien (1892)\n","Fahrenheit 451 by Ray Bradbury (1920)\n","Moby-Dick by Herman Melville (1819)\n","War and Peace by Leo Tolstoy (1828)\n","Crime and Punishment by Fyodor Dostoevsky (1821)\n","Jane Eyre by Charlotte Brontë (1816)\n","Wuthering Heights by Emily Brontë (1818)\n","Brave New World by Aldous Huxley (1894)\n","The Lord of the Rings by J.R.R. Tolkien (1892)\n","The Alchemist by Paulo Coelho (1947)\n","Harry Potter and the Sorcerer's Stone by J.K. Rowling (1965)\n","The Lion, the Witch and the Wardrobe by C.S. Lewis (1898)\n","The Grapes of Wrath by John Steinbeck (1902)\n","The Kite Runner by Khaled Hosseini (1965)\n","Animal Farm by George Orwell (1903)\n","The Da Vinci Code by Dan Brown (1964)\n","Les Misérables by Victor Hugo (1802)\n","A Tale of Two Cities by Charles Dickens (1812)\n","Don Quixote by Miguel de Cervantes (1547)\n","One Hundred Years of Solitude by Gabriel García Márquez (1927)\n","The Old Man and The Sea by Ernest Hemingway (1899)\n","The Picture of Dorian Gray by Oscar Wilde (1854)\n","The Brothers Karamazov by Fyodor Dostoevsky (1821)\n","Dracula by Bram Stoker (1847)\n","Lolita by Vladimir Nabokov (1899)\n","Madame Bovary by Gustave Flaubert (1821)\n","The Sound and the Fury by William Faulkner (1897)\n","Frankenstein by Mary Shelley (1797)\n","The Divine Comedy by Dante Alighieri (1265)\n","The Sun Also Rises by Ernest Hemingway (1899)\n","A Farewell to Arms by Ernest Hemingway (1899)\n","Gone with the Wind by Margaret Mitchell (1900)\n","The Adventures of Huckleberry Finn by Mark Twain (1835)\n","Slaughterhouse-Five by Kurt Vonnegut (1922)\n","Lord of the Flies by William Golding (1911)\n","The Chronicles of Narnia by C.S. Lewis (1898)\n","Catch-22 by Joseph Heller (1923)\n","Ulysses by James Joyce (1882)\n","The Color Purple by Alice Walker (1944)\n","Heart of Darkness by Joseph Conrad (1857)\n","Rebecca by Daphne du Maurier (1907)\n","Alice's Adventures in Wonderland by Lewis Carroll (1832)\n","The Metamorphosis by Franz Kafka (1883)\n","The Stranger by Albert Camus (1913)\n","The Road by Cormac McCarthy (1933)\n","Beloved by Toni Morrison (1931)\n","The Handmaid's Tale by Margaret Atwood (1939)\n","Middlemarch by George Eliot (1819)\n","Great Expectations by Charles Dickens (1812)\n","Anna Karenina by Leo Tolstoy (1828)\n","The Count of Monte Cristo by Alexandre Dumas (1802)\n","Sense and Sensibility by Jane Austen (1775)\n","Invisible Man by Ralph Ellison (1914)\n","Things Fall Apart by Chinua Achebe (1930)\n","Emma by Jane Austen (1775)\n","Of Mice and Men by John Steinbeck (1902)\n","Macbeth by William Shakespeare (1564)\n","Hamlet by William Shakespeare (1564)\n","Othello by William Shakespeare (1564)\n","King Lear by William Shakespeare (1564)\n","The Tempest by William Shakespeare (1564)\n","As You Like It by William Shakespeare (1564)\n","A Midsummer Night's Dream by William Shakespeare (1564)\n","The Merchant of Venice by William Shakespeare (1564)\n","The Scarlet Letter by Nathaniel Hawthorne (1804)\n","The Jungle by Upton Sinclair (1878)\n","Dr. Jekyll and Mr. Hyde by Robert Louis Stevenson (1850)\n","Gulliver's Travels by Jonathan Swift (1667)\n","The Secret Garden by Frances Hodgson Burnett (1849)\n","Charlie and the Chocolate Factory by Roald Dahl (1916)\n","Matilda by Roald Dahl (1916)\n","The Shining by Stephen King (1947)\n","It by Stephen King (1947)\n","Misery by Stephen King (1947)\n","The Hitchhiker's Guide to the Galaxy by Douglas Adams (1952)\n","Dune by Frank Herbert (1920)\n","Ender's Game by Orson Scott Card (1951)\n","Neuromancer by William Gibson (1948)\n","Do Androids Dream of Electric Sheep? by Philip K. Dick (1928)\n","The Time Machine by H.G. Wells (1866)\n","The War of the Worlds by H.G. Wells (1866)\n","The Invisible Man by H.G. Wells (1866)\n","Journey to the Center of the Earth by Jules Verne (1828)\n","Twenty Thousand Leagues Under the Sea by Jules Verne (1828)\n","The Call of the Wild by Jack London (1876)\n","White Fang by Jack London (1876)\n","The Giver by Lois Lowry (1937)\n","The Outsiders by S.E. Hinton (1948)\n","The Fault in Our Stars by John Green (1977)\n","The Hunger Games by Suzanne Collins (1962)\n","Divergent by Veronica Roth (1988)\n","The Maze Runner by James Dashner (1972)\n","Ready Player One by Ernest Cline (1972)\n","The Wind-Up Bird Chronicle by Haruki Murakami (1949)\n","Norwegian Wood by Haruki Murakami (1949)\n","Kafka on the Shore by Haruki Murakami (1949)\n","Meditations by Marcus Aurelius (121)\n","The Prince by Niccolò Machiavelli (1469)\n","The Wealth of Nations by Adam Smith (1723)\n","Capital in the Twenty-First Century by Thomas Piketty (1971)\n","A Brief History of Time by Stephen Hawking (1942)\n","The Selfish Gene by Richard Dawkins (1941)\n","Silent Spring by Rachel Carson (1907)\n","The God Delusion by Richard Dawkins (1941)\n","Sapiens: A Brief History of Humankind by Yuval Noah Harari (1976)\n","Educated by Tara Westover (1986)\n","Becoming by Michelle Obama (1964)\n","The Diary of a Young Girl by Anne Frank (1929)\n","Long Walk to Freedom by Nelson Mandela (1918)\n","Steve Jobs by Walter Isaacson (1952)\n","Man's Search for Meaning by Viktor E. Frankl (1905)\n","The Power of Habit by Charles Duhigg (1974)\n","Atomic Habits by James Clear (1986)\n","The 7 Habits of Highly Effective People by Stephen R. Covey (1932)\n","How to Win Friends and Influence People by Dale Carnegie (1888)\n","On the Road by Jack Kerouac (1922)\n","The Bell Jar by Sylvia Plath (1932)\n","The Left Hand of Darkness by Ursula K. Le Guin (1929)\n","The Name of the Rose by Umberto Eco (1932)\n","The Unbearable Lightness of Being by Milan Kundera (1929)\n","Love in the Time of Cholera by Gabriel García Márquez (1927)\n","The Trial by Franz Kafka (1883)\n","The Castle by Franz Kafka (1883)\n","The Idiot by Fyodor Dostoevsky (1821)\n","Notes from Underground by Fyodor Dostoevsky (1821)\n","Siddhartha by Hermann Hesse (1877)\n","Steppenwolf by Hermann Hesse (1877)\n","The Glass Bead Game by Hermann Hesse (1877)\n","Thus Spoke Zarathustra by Friedrich Nietzsche (1844)\n","Demons by Fyodor Dostoevsky (1821)\n","Doctor Zhivago by Boris Pasternak (1890)\n","The Master and Margarita by Mikhail Bulgakov (1891)\n","Dead Souls by Nikolai Gogol (1809)\n","The Hunchback of Notre-Dame by Victor Hugo (1802)\n","The Stranger by Albert Camus (1913)\n","The Plague by Albert Camus (1913)\n","The Myth of Sisyphus by Albert Camus (1913)\n","Les Fleurs du mal by Charles Baudelaire (1821)\n","The Picture of Dorian Gray by Oscar Wilde (1854)\n","The Importance of Being Earnest by Oscar Wilde (1854)\n","To the Lighthouse by Virginia Woolf (1882)\n","Mrs Dalloway by Virginia Woolf (1882)\n","Orlando by Virginia Woolf (1882)\n","A Room of One's Own by Virginia Woolf (1882)\n","Beloved by Toni Morrison (1931)\n","Song of Solomon by Toni Morrison (1931)\n","The Bluest Eye by Toni Morrison (1931)\n","Invisible Man by Ralph Ellison (1914)\n","Native Son by Richard Wright (1908)\n","Their Eyes Were Watching God by Zora Neale Hurston (1891)\n","The Sound and the Fury by William Faulkner (1897)\n","Light in August by William Faulkner (1897)\n","East of Eden by John Steinbeck (1902)\n","Cannery Row by John Steinbeck (1902)\n","The Pearl by John Steinbeck (1902)\n","The Sun Also Rises by Ernest Hemingway (1899)\n","A Farewell to Arms by Ernest Hemingway (1899)\n","For Whom the Bell Tolls by Ernest Hemingway (1899)\n","Middlemarch by George Eliot (1819)\n","Daniel Deronda by George Eliot (1819)\n","Silas Marner by George Eliot (1819)\n","Wuthering Heights by Emily Brontë (1818)\n","Agnes Grey by Anne Brontë (1820)\n","The Tenant of Wildfell Hall by Anne Brontë (1820)\n","Dracula by Bram Stoker (1847)\n","Rebecca by Daphne du Maurier (1907)\n","The Secret History by Donna Tartt (1963)\n","The Goldfinch by Donna Tartt (1963)\n","The Little Friend by Donna Tartt (1963)\n","Gone Girl by Gillian Flynn (1971)\n","Sharp Objects by Gillian Flynn (1971)\n","Dark Places by Gillian Flynn (1971)\n","The Girl with the Dragon Tattoo by Stieg Larsson (1954)\n","The Girl Who Played with Fire by Stieg Larsson (1954)\n","The Girl Who Kicked the Hornets' Nest by Stieg Larsson (1954)\n","The Da Vinci Code by Dan Brown (1964)\n","Angels & Demons by Dan Brown (1964)\n","Inferno by Dan Brown (1964)\n","The Hobbit by J.R.R. Tolkien (1892)\n","The Fellowship of the Ring by J.R.R. Tolkien (1892)\n","The Two Towers by J.R.R. Tolkien (1892)\n","The Return of the King by J.R.R. Tolkien (1892)\n","A Game of Thrones by George R.R. Martin (1948)\n","A Clash of Kings by George R.R. Martin (1948)\n","A Storm of Swords by George R.R. Martin (1948)\n","A Feast for Crows by George R.R. Martin (1948)\n","A Dance with Dragons by George R.R. Martin (1948)\n","The Name of the Wind by Patrick Rothfuss (1973)\n","The Wise Man's Fear by Patrick Rothfuss (1973)\n","The Blade Itself by Joe Abercrombie (1974)\n","Before They Are Hanged by Joe Abercrombie (1974)\n","Last Argument of Kings by Joe Abercrombie (1974)\n","The Way of Kings by Brandon Sanderson (1975)\n","Words of Radiance by Brandon Sanderson (1975)\n","Oathbringer by Brandon Sanderson (1975)\n","Dune by Frank Herbert (1920)\n","Dune Messiah by Frank Herbert (1920)\n","Children of Dune by Frank Herbert (1920)\n","Neuromancer by William Gibson (1948)\n","Count Zero by William Gibson (1948)\n","Mona Lisa Overdrive by William Gibson (1948)\n","Snow Crash by Neal Stephenson (1959)\n","Cryptonomicon by Neal Stephenson (1959)\n","Anathem by Neal Stephenson (1959)\n","Foundation by Isaac Asimov (1920)\n","Foundation and Empire by Isaac Asimov (1920)\n","Second Foundation by Isaac Asimov (1920)\n","Do Androids Dream of Electric Sheep? by Philip K. Dick (1928)\n","Ubik by Philip K. Dick (1928)\n","The Man in the High Castle by Philip K. Dick (1928)\n","Brave New World by Aldous Huxley (1894)\n","Fahrenheit 451 by Ray Bradbury (1920)\n","1984 by George Orwell (1903)\n","Animal Farm by George Orwell (1903)\n","The Road by Cormac McCarthy (1933)\n","Blood Meridian by Cormac McCarthy (1933)\n","No Country for Old Men by Cormac McCarthy (1933)\n","The Stand by Stephen King (1947)\n","The Dark Tower: The Gunslinger by Stephen King (1947)\n","American Gods by Neil Gaiman (1960)\n","Neverwhere by Neil Gaiman (1960)\n","Good Omens by Neil Gaiman & Terry Pratchett (1960)\n","The Color of Magic by Terry Pratchett (1948)\n","Guards! Guards! by Terry Pratchett (1948)\n","Small Gods by Terry Pratchett (1948)\n","The Lies of Locke Lamora by Scott Lynch (1978)\n","Red Seas Under Red Skies by Scott Lynch (1978)\n","Republic of Thieves by Scott Lynch (1978)\n","The Kite Runner by Khaled Hosseini (1965)\n","A Thousand Splendid Suns by Khaled Hosseini (1965)\n","And the Mountains Echoed by Khaled Hosseini (1965)\n","Life of Pi by Yann Martel (1963)\n","The Life-Changing Magic of Tidying Up by Marie Kondo (1984)\n","The Alchemist by Paulo Coelho (1947)\n","The Pilgrimage by Paulo Coelho (1947)\n","Veronika Decides to Die by Paulo Coelho (1947)\n","Memoirs of a Geisha by Arthur Golden (1956)\n","The Book Thief by Markus Zusak (1975)\n","All the Light We Cannot See by Anthony Doerr (1973)\n","The Help by Kathryn Stockett (1969)\n","The Girl on the Train by Paula Hawkins (1972)\n","Big Little Lies by Liane Moriarty (1966)\n","Eleanor Oliphant Is Completely Fine by Gail Honeyman (1972)\n","The Martian by Andy Weir (1972)\n","Ready Player One by Ernest Cline (1972)\n","Artemis by Andy Weir (1972)\n","The Fault in Our Stars by John Green (1977)\n","Looking for Alaska by John Green (1977)\n","Paper Towns by John Green (1977)\n","The Perks of Being a Wallflower by Stephen Chbosky (1970)\n","Thirteen Reasons Why by Jay Asher (1975)\n","Divergent by Veronica Roth (1988)\n","Insurgent by Veronica Roth (1988)\n","Allegiant by Veronica Roth (1988)\n","The Hunger Games by Suzanne Collins (1962)\n","Catching Fire by Suzanne Collins (1962)\n","Mockingjay by Suzanne Collins (1962)\n","The Maze Runner by James Dashner (1972)\n","The Scorch Trials by James Dashner (1972)\n","The Death Cure by James Dashner (1972)\n","City of Bones by Cassandra Clare (1973)\n","City of Ashes by Cassandra Clare (1973)\n","City of Glass by Cassandra Clare (1973)\n","The Lightning Thief by Rick Riordan (1964)\n","The Sea of Monsters by Rick Riordan (1964)\n","The Titan's Curse by Rick Riordan (1964)\n","The Hate U Give by Angie Thomas (1988)\n","Children of Blood and Bone by Tomi Adeyemi (1993)\n","Red Queen by Victoria Aveyard (1990)\n","Shadow and Bone by Leigh Bardugo (1975)\n","Six of Crows by Leigh Bardugo (1975)\n","Crooked Kingdom by Leigh Bardugo (1975)\n","Circe by Madeline Miller (1978)\n","The Song of Achilles by Madeline Miller (1978)\n","The Silent Patient by Alex Michaelides (1977)\n","Where the Crawdads Sing by Delia Owens (1949)\n","Little Fires Everywhere by Celeste Ng (1980)\n","Normal People by Sally Rooney (1991)\n","The Vanishing Half by Brit Bennett (1990)\n","An American Marriage by Tayari Jones (1970)\n","The Midnight Library by Matt Haig (1975)\n","Project Hail Mary by Andy Weir (1972)\n","Klara and the Sun by Kazuo Ishiguro (1954)\n","The Invisible Life of Addie LaRue by V.E. Schwab (1987)\n","Piranesi by Susanna Clarke (1959)\n","\n","Library Management System\n","1. Register as a customer\n","2. Display available books\n","3. Borrow a book\n","4. Return a book\n","5. Exit\n","\n","Enter your choice (1-5): 3\n","\n","Enter your customer ID: 1\n","Enter the ISBN of the book to borrow: 2\n","Error: Book does not exist.\n","\n","Library Management System\n","1. Register as a customer\n","2. Display available books\n","3. Borrow a book\n","4. Return a book\n","5. Exit\n","\n","Enter your choice (1-5): 4\n","\n","Enter your customer ID: 5\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-5f35ee56af47>\u001b[0m in \u001b[0;36m<cell line: 193>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    208\u001b[0m         \u001b[0mborrow_book_interactive\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    209\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mchoice\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'4'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 210\u001b[0;31m         \u001b[0mreturn_book_interactive\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    211\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mchoice\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'5'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    212\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Goodbye!\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-4-5f35ee56af47>\u001b[0m in \u001b[0;36mreturn_book_interactive\u001b[0;34m(lms)\u001b[0m\n\u001b[1;32m    172\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mreturn_book_interactive\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    173\u001b[0m     \u001b[0mcustomer_id\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\nEnter your customer ID: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 174\u001b[0;31m     \u001b[0misbn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Enter the ISBN of the book to return: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    175\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    176\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"m5H9eJ7puuyM"}},{"cell_type":"code","source":["class Author:\n","    def __init__(self, name, birth_year):\n","        self.name = name\n","        self.birth_year = birth_year\n","        self.books = set()\n","\n","    def add_book(self, book):\n","        # TODO: Implement adding a book to the author's collection\n","        pass"],"metadata":{"id":"RJCryghKXKSz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Book:\n","    def __init__(self, isbn, title, author, year, copies, genre):\n","        self.isbn = isbn\n","        self.title = title\n","        self.author = author\n","        self.year = year\n","        self.copies = copies\n","        self.available_copies = copies\n","        self.genre = genre\n","\n","    def __str__(self):\n","        # TODO: Implement string representation of the book\n","        pass"],"metadata":{"id":"4AjOfgelXKHI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Customer:\n","    def __init__(self, customer_id, name, email):\n","        self.customer_id = customer_id\n","        self.name = name\n","        self.email = email\n","        self.borrowed_books = []\n","\n","    def borrow_book(self, book):\n","        # TODO: Implement borrowing a book\n","        pass\n","\n","    def return_book(self, book):\n","        # TODO: Implement returning a book\n","        pass\n","\n","    def get_borrowed_books(self):\n","        # TODO: Implement getting the list of borrowed books\n","        pass"],"metadata":{"id":"jE0pUYvdZk8o"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class LibraryManagementSystem:\n","    def __init__(self):\n","        self.books = {}  # Dictionary: ISBN -> Book object\n","        self.authors = {}  # Dictionary: name -> Author object\n","        self.customers = {}  # Dictionary: customerID -> Customer object\n","        self.genre_classification = {}  # Dictionary: Genre -> {set of ISBNs}\n","        self.waitlist = {}  # Dictionary: ISBN -> [list of customerIDs]\n","\n","    def add_book(self, isbn, title, author_name, author_birth_year, year, copies, genre):\n","        # TODO: Implement adding a new book to the library\n","        pass\n","\n","    def register_customer(self, name, email):\n","        # TODO: Implement registering a new customer\n","        pass\n","\n","    def borrow_book(self, isbn, customer_id):\n","        # TODO: Implement borrowing a book\n","        pass\n","\n","    def return_book(self, isbn, customer_id):\n","        # TODO: Implement returning a book\n","        pass\n","\n","    def search_books(self, query):\n","        # TODO: Implement searching for books by title, author, or ISBN\n","        pass\n","\n","    def display_available_books(self):\n","        # TODO: Implement displaying all available books\n","        pass\n","\n","    def display_customer_books(self, customer_id):\n","        # TODO: Implement displaying books borrowed by a customer\n","        pass\n","\n","    def recommend_books(self, customer_id):\n","        # TODO: Implement a basic recommendation system\n","        pass\n","\n","    def add_to_waitlist(self, isbn, customer_id):\n","        # TODO: Implement adding a customer to a book's waitlist\n","        pass\n","\n","    def check_late_returns(self, days_threshold=14):\n","        # TODO: Implement checking for late returns\n","        pass\n","\n","    def run(self):\n","        # TODO: Implement the main run loop for the console interface\n","        pass"],"metadata":{"id":"OxFE67Zszed8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Deadlines\n","\n","1. Check-in - September 24, 2024 at 11:59pm\n","    *   Your code will not be graded, however, this check-in is required to earn credit on the lab. You will submit your progress up to this point. You will be evaluated only on the amount of progress that you have made (i.e., 1 - satisfactory progress, 0-unsatisfactory progress); solutions do not yet need to be complete, but should be reasonably progressed.\n","    *   Submit your progress by uploading the .ipynb file on Blackboard under \"Lab 1 - Check-In\"\n","2. Final Submission - October 1, 2024 at 11:59pm\n","    *   You should submit a completed lab assignment to include all appropriate source code above.\n","\n"],"metadata":{"id":"2AXqfqCyQ-n_"}},{"cell_type":"markdown","source":["## How to Submit\n","\n","1. File > Download .ipynb\n","2. Go to Blackboard, find the submission page, and upload the .ipynb file you just downloaded.\n"],"metadata":{"id":"_KjOAZGxQnNe"}}]}