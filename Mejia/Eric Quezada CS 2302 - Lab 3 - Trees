{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1C8NkIYpA4R0UekfanWr7iw-F5tFyGAIn","timestamp":1731434357436},{"file_id":"1sVcoBHZR2lLlM8I22URg6kokJf65RppV","timestamp":1730745429398},{"file_id":"1ON8uMU6rulHAv1z5lvayTAED0avj2pnQ","timestamp":1609813315933}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"MKsRDH5ZUdfasdv"},"source":["##CS 2302 - Lab 3 - Trees\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"Lzc5KPs59OyY"},"source":["## **Before you start**\n","\n","Make a copy of this Colab by clicking on File > Save a Copy in Drive\n"]},{"cell_type":"code","source":["#@title  { run: \"auto\", display-mode: \"form\" }\n","student_id = \"80532860\" #@param {type:\"string\"}\n","first_name = \"Eric\" #@param {type:\"string\"}\n","last_name = \"Quezada\" #@param {type:\"string\"}"],"metadata":{"id":"GMAnKbl0ejPZ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"overview"},"source":["## Overview\n","\n","In this lab, you will solve 4 tree problems. The first problem asks you to implement a self-balancing binary search tree. You will be required to used your tree implementation to test your solutions.\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"cBO-Xrldpe62"},"source":["## Problem 1\n","\n","### Self-balancing binary search tree\n","\n","Implement a self-balancing binary search tree. You are free to select any type of tree from this list:\n","- [AVL](https://en.wikipedia.org/wiki/AVL_tree)\n","- [Red-Black](https://en.wikipedia.org/wiki/Red%E2%80%93black_tree)\n","- [AA](https://en.wikipedia.org/wiki/AA_tree)\n","- [Scapegoat](https://en.wikipedia.org/wiki/Scapegoat_tree)\n","- [Splay](https://en.wikipedia.org/wiki/Splay_tree)\n","- [Treap](https://en.wikipedia.org/wiki/Treap)\n","\n","You are free to look online at existing implementations to write your own, but if you do so, you MUST cite the source."]},{"cell_type":"code","metadata":{"id":"RCJACl9m6KJw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731552625416,"user_tz":420,"elapsed":198,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}},"outputId":"2a15e213-8e8e-45f9-838b-9a0ead0e3a06"},"source":["# Taken from: https://www.geeksforgeeks.org/avl-tree-in-python/\n","\n","class Node:\n","    def __init__(self, value):\n","        self.value = value\n","        self.left = None\n","        self.right = None\n","        self.height = 1\n","\n","class AVLTree:\n","    def __init__(self):\n","        self.root = None\n","\n","    def height(self, node):\n","        if not node:\n","            return 0\n","        return node.height\n","\n","    def balance(self, node):\n","        if not node:\n","            return 0\n","        return self.height(node.left) - self.height(node.right)\n","\n","    def insert(self, root, value):\n","        if not root:\n","            return Node(value)\n","        elif value < root.value:\n","            root.left = self.insert(root.left, value)\n","        else:\n","            root.right = self.insert(root.right, value)\n","\n","        root.height = 1 + max(self.height(root.left), self.height(root.right))\n","        balance = self.balance(root)\n","\n","        # Left rotation\n","        if balance > 1 and value < root.left.value:\n","            return self.right_rotate(root)\n","\n","        # Right rotation\n","        if balance < -1 and value > root.right.value:\n","            return self.left_rotate(root)\n","\n","        # Left-Right rotation\n","        if balance > 1 and value > root.left.value:\n","            root.left = self.left_rotate(root.left)\n","            return self.right_rotate(root)\n","\n","        # Right-Left rotation\n","        if balance < -1 and value < root.right.value:\n","            root.right = self.right_rotate(root.right)\n","            return self.left_rotate(root)\n","\n","        return root\n","\n","    def delete(self, root, value):\n","        if not root:\n","            return root\n","\n","        if value < root.value:\n","            root.left = self.delete(root.left, value)\n","        elif value > root.value:\n","            root.right = self.delete(root.right, value)\n","        else:\n","            if not root.left:\n","                temp = root.right\n","                root = None\n","                return temp\n","            elif not root.right:\n","                temp = root.left\n","                root = None\n","                return temp\n","\n","            temp = self.min_value_node(root.right)\n","            root.value = temp.value\n","            root.right = self.delete(root.right, temp.value)\n","\n","        if not root:\n","            return root\n","\n","        root.height = 1 + max(self.height(root.left), self.height(root.right))\n","        balance = self.balance(root)\n","\n","        # Left rotation\n","        if balance > 1 and self.balance(root.left) >= 0:\n","            return self.right_rotate(root)\n","\n","        # Right rotation\n","        if balance < -1 and self.balance(root.right) <= 0:\n","            return self.left_rotate(root)\n","\n","        # Left-Right rotation\n","        if balance > 1 and self.balance(root.left) < 0:\n","            root.left = self.left_rotate(root.left)\n","            return self.right_rotate(root)\n","\n","        # Right-Left rotation\n","        if balance < -1 and self.balance(root.right) > 0:\n","            root.right = self.right_rotate(root.right)\n","            return self.left_rotate(root)\n","\n","        return root\n","\n","    def left_rotate(self, z):\n","        y = z.right\n","        T2 = y.left\n","\n","        y.left = z\n","        z.right = T2\n","\n","        z.height = 1 + max(self.height(z.left), self.height(z.right))\n","        y.height = 1 + max(self.height(y.left), self.height(y.right))\n","\n","        return y\n","\n","    def right_rotate(self, z):\n","        y = z.left\n","        T3 = y.right\n","\n","        y.right = z\n","        z.left = T3\n","\n","        z.height = 1 + max(self.height(z.left), self.height(z.right))\n","        y.height = 1 + max(self.height(y.left), self.height(y.right))\n","\n","        return y\n","\n","    def min_value_node(self, root):\n","        current = root\n","        while current.left:\n","            current = current.left\n","        return current\n","\n","    def search(self, root, value):\n","        if not root or root.value == value:\n","            return root\n","        if root.value < value:\n","            return self.search(root.right, value)\n","        return self.search(root.left, value)\n","\n","    def insert_value(self, value):\n","        self.root = self.insert(self.root, value)\n","\n","    def delete_value(self, value):\n","        self.root = self.delete(self.root, value)\n","\n","    def search_value(self, value):\n","        return self.search(self.root, value)\n","\n","\n","# Example usage:\n","if __name__ == \"__main__\":\n","    tree = AVLTree()\n","    tree.insert_value(10)\n","    tree.insert_value(20)\n","    tree.insert_value(30)\n","    tree.insert_value(40)\n","    tree.insert_value(50)\n","\n","    print(\"Tree after insertion:\")\n","    # In-order traversal to print the tree\n","    def inorder_traversal(root):\n","        if root:\n","            inorder_traversal(root.left)\n","            print(root.value),\n","            inorder_traversal(root.right)\n","\n","    inorder_traversal(tree.root)\n","    print()\n","\n","    tree.delete_value(20)\n","    print(\"Tree after deletion of 20:\")\n","    inorder_traversal(tree.root)\n","    print()\n","\n","    result = tree.search_value(30)\n","    if result:\n","        print(\"Node found\")\n","    else:\n","        print(\"Node not found\")\n","\n"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Tree after insertion:\n","10\n","20\n","30\n","40\n","50\n","\n","Tree after deletion of 20:\n","10\n","30\n","40\n","50\n","\n","Node found\n"]}]},{"cell_type":"markdown","metadata":{"id":"OaP6F0_-oth_"},"source":["## Problem 2\n","\n","### Range Count\n","\n","Given the root node of a binary tree (duplicates allowed), return the number of values stored in the three that are between *min_val* and *max_val* (inclusive).\n","```\n","Examples:\n","\n","       7\n","     /    \\\n","    10      3      \n","  /   \\   /   \\\n","9    5   -1    12\n","\n","min_val = 2, max_val = 10  →  5 (values in the range: 3, 5, 7, 9, 10)\n","min_val = 3, max_val = 8  →  3 (values in the range: 3, 5, 7)\n","min_val = 10, max_val = 20  → 2 (values in the range: 10, 12)\n","min_val = 20, max_val = 30  →  0 (no values in the range)\n","```"]},{"cell_type":"code","metadata":{"id":"lu9cWMVUpTUE","executionInfo":{"status":"ok","timestamp":1731552638309,"user_tz":420,"elapsed":210,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}}},"source":["def range_count(root, min_val, max_val):\n","  # if root does not exist\n","  if root is None:\n","    return 0\n","  # Count range recursively\n","  count = 0\n","  if min_val <= root.value <= max_val:\n","    count += 1\n","  count += range_count(root.left, min_val, max_val)\n","  count += range_count(root.right, min_val, max_val)\n","  return count"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ULY67is8phGu"},"source":["Test your solution by calling it multiple times with different input values and comparing the output produced by your method to the expected output. Do not write an excesive amount of tests; just write the number of tests you think you need and justify your decisions. To create your input trees, you can 1) use the Tree implementation you wrote in Problem 1, or 2) *manually* build them by directly instantiating nodes and setting their left and right attributes to connect them."]},{"cell_type":"code","metadata":{"id":"hHBURBBaprCi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731552643929,"user_tz":420,"elapsed":162,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}},"outputId":"a0ad9bc7-c14a-477f-bb7b-1a6697b4c3c0"},"source":["tree = AVLTree()\n","tree.insert_value(10)\n","tree.insert_value(3)\n","tree.insert_value(12)\n","tree.insert_value(9)\n","tree.insert_value(5)\n","print(range_count(tree.root, 2, 12))"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n"]}]},{"cell_type":"markdown","metadata":{"id":"wWZBXvtZq3YT"},"source":["## Problem 3\n","\n","### Invert Tree\n","\n","Write a function that receives the root of a binary tree as input and inverts it. Do not create a new tree, modify the one that was passed as input. Feel free to write a helper (recursive) method.\n","\n","```\n","Example 1\n","Tree before method call:\n","         7\n","       /   \\  \n","     3      10\n","   /   \\   /   \\\n"," -1    5  9    12\n","\n","Tree after method call:\n","         7\n","       /   \\  \n","     10      3\n","   /   \\   /   \\\n"," 12    9  5    -1\n","\n","\n","Example 2\n","Tree before method call:\n","         7\n","       /   \\  \n","     3     10\n","          /   \\\n","         9    12\n","\n","Tree after method call:\n","         7\n","       /   \\  \n","     10     3\n","    /   \\\n","   12    9\n","```\n"]},{"cell_type":"code","metadata":{"id":"utXoyki7rLjR","executionInfo":{"status":"ok","timestamp":1731552683488,"user_tz":420,"elapsed":182,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}}},"source":["def invert_tree(root):\n","  # if root does not exist\n","    if root is None:\n","        return None\n","    # Recursively invert the left and right subtrees\n","    invert_left = invert_tree(root.left)\n","    invert_right = invert_tree(root.right)\n","\n","    # Swap the left and right children\n","    temp = root.left\n","    root.left = root.right\n","    root.right = temp\n","\n","    return root"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"o8vjb3virVNG"},"source":["Test your solution by calling it multiple times with different input values and comparing the output produced by your method to the expected output. Do not write an excesive amount of tests; just write the number of tests you think you need and justify your decisions. To create your input trees, you can *manually* build them by directly instantiating nodes and setting their left and right attributes to connect them."]},{"cell_type":"code","metadata":{"id":"Y95SWdKPrWek","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731552686144,"user_tz":420,"elapsed":186,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}},"outputId":"b4ea977f-69f2-4891-9fe2-906d655fe459"},"source":["tree = AVLTree()\n","tree.insert_value(10)\n","tree.insert_value(3)\n","tree.insert_value(12)\n","tree.insert_value(9)\n","tree.insert_value(5)\n","print(\"Tree before method call:\")\n","inorder_traversal(tree.root)\n","print()\n","invert_tree(tree.root)\n","print(\"Tree after method call:\")\n","inorder_traversal(tree.root)\n","print()"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Tree before method call:\n","3\n","5\n","9\n","10\n","12\n","\n","Tree after method call:\n","12\n","10\n","9\n","5\n","3\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"3fvX4LUHTREQ"},"source":["## Problem 4\n","\n","### Identical Trees\n","\n","Given the roots of two binary trees as input, return True if and only if they are identical; False, otherwise. Two trees are identical if they are structurally the same, and every corresponding pair of nodes contain the same value.\n","\n","```\n","Example 1\n","Tree 1:\n","         7\n","       /   \\\n","     3      10\n","   /   \\   /   \\\n"," -1    5   9    12\n","\n","\n","Tree 2:\n","         7\n","       /   \\\n","     3      10\n","   /   \\   /   \\\n"," -1    5   9    12\n","         \n","Output: True\n","\n","Example 2\n","Tree 1:\n","         2\n","       /   \\\n","      3     1\n","\n","Tree 2:\n","\n","         1\n","       /   \\\n","      2     3\n","\n","Output: False\n","\n","Example 3\n","Tree 1:\n","         7\n","       /   \\\n","     3      10\n","           /   \\\n","          9    12\n","\n","Tree 2:\n","\n","         7\n","       /   \\\n","      3     10\n","    /   \\\n","   9    12\n","\n","Output: False\n","```"]},{"cell_type":"code","metadata":{"id":"6AJQPbcOTQRP","executionInfo":{"status":"ok","timestamp":1731552702225,"user_tz":420,"elapsed":182,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}}},"source":["def are_identical(root1, root2):\n","  # If both roots are none\n","  if root1 is None and root2 is None:\n","    return True\n","  # If only one root is none\n","  if root1 is None or root2 is None:\n","    return False\n","  # If not the same value\n","  if root1.value != root2.value:\n","    return False\n","  # Otherwise, you have identical trees. Call recursively\n","  return are_identical(root1.left, root2.left) and are_identical(root1.right, root2.right)"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HtDmZt4WV8Ch"},"source":["Test your solution by calling it multiple times with different input values and comparing the output produced by your method to the expected output. Do not write an excesive amount of tests; just write the number of tests you think you need and justify your decisions. To create your input trees, you can 1) use the Tree implementation you wrote in Problem 1, or 2) *manually* build them by directly instantiating nodes and setting their left and right attributes to connect them."]},{"cell_type":"code","metadata":{"id":"EeQMnAaOV-b9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731552716740,"user_tz":420,"elapsed":195,"user":{"displayName":"Eric Quezada","userId":"11012937240517519565"}},"outputId":"53a91464-2ec9-4999-e3ed-c83cab4db12e"},"source":["tree1 = AVLTree()\n","tree1.insert_value(10)\n","tree1.insert_value(20)\n","tree1.insert_value(30)\n","tree1.insert_value(40)\n","tree1.insert_value(50)\n","\n","tree2 = AVLTree()\n","tree2.insert_value(10)\n","tree2.insert_value(20)\n","tree2.insert_value(30)\n","tree2.insert_value(40)\n","tree2.insert_value(50)\n","\n","print(are_identical(tree1.root, tree2.root))\n","\n","tree3 = AVLTree()\n","tree3.insert_value(100)\n","tree3.insert_value(200)\n","tree3.insert_value(300)\n","tree3.insert_value(400)\n","tree3.insert_value(500)\n","\n","print(are_identical(tree1.root, tree3.root))"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","False\n"]}]},{"cell_type":"markdown","metadata":{"id":"_njBEETJ9bmT"},"source":["## How to Submit This Lab\n","\n","1. File > Download .ipynb\n","2. Go to Blackboard, find the lab submission page, and upload the .ipynb file you just downloaded."]},{"cell_type":"markdown","source":["## Deadlines\n","\n","Final Submission - November 21, 2024 at 11:59pm\n","    \n","\n","*   You should submit a completed lab assignment to include all appropriate\n","source code above"],"metadata":{"id":"PT83bhFEdyaG"}}]}